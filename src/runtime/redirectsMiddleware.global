import { defineNuxtRouteMiddleware, navigateTo } from "nuxt/app";

export default defineNuxtRouteMiddleware(async (to, _) => {
  if (to.fullPath.includes("robots.txt")) return
  const getTypedRedirects = (redirects: any) =>
    redirects as Array<{ code: number; from: string; to: string }>;
  const isRegex = (s: string) => s.startsWith("^") && s.endsWith("$");

  // if redirection is only server side, skip redirection entirely, else load redirection rules
  let redirects: typeof import("./redirects")["redirects"] | null = null
  if (!<% print(options.alwaysRedirect) %> && !process.server) {
    return
  } else {
    const { redirects: r } = await import("./redirects")
    redirects = r
  }

  // divide redirection rules in punctual redirects and regex redirection rules
  const typedRedirects = getTypedRedirects(redirects);


  const punctualRedirects = typedRedirects.filter(
    (redirectionRule) => !isRegex(redirectionRule.from)
  );

  const regexRedirects = typedRedirects.filter((redirectionRule) =>
    isRegex(redirectionRule.from)
  );

  const hasTrailingSlash = (path: string) => path.endsWith("/")
  const removeTrailingSlash = (path: string) => hasTrailingSlash(path) ? path.slice(0, -1) : path
  const addTrailingSlash = (path: string) => {
    if (<% print(options.trailingSlash) %>) {
      if (!hasTrailingSlash(path)) {
        return path + "/"
      }
    }

    return path
  }
  const getQueriesFromPath = (path: string) => {
    return path.split("?")?.[1]?.split("&") ?? []
  }

  const joinQueriesAndPath = (path: string, queries: string[]) => {
    if (!queries.length) return path
    return path + "?" + queries.join('&')
  }

  const getUrl = (path: string) => {
    return path.split("?")[0]
  }

  const getQuery = (path: string) => {
    return path.split("?")?.[1] ?? ''
  }

  // redirection only happens server side
  if (process.server || <% print(options.alwaysRedirect) %>) {
    // removing = and trailingSlash, ignore query
    let path = removeTrailingSlash(to.fullPath.endsWith("=")
      ? to.fullPath.slice(0, -1)
      : to.fullPath);

    const query = getQuery(path)
    const urlPath = getUrl(path)

    if (to.fullPath !== "/") {
      // handling punctual redirects
      const punctualRedirection = punctualRedirects.find(
        (r) => {
        const from = r.from
        const fromPath = getUrl(from)
        const fromQuery = getQuery(from)
          if (fromQuery !== '') {
            // check validity of pathQuery
            const qArr = query.split("&")
            const fromQArr = fromQuery.split("&")

            const queryValidated = fromQArr.every(q => qArr.includes(q))

            return queryValidated && removeTrailingSlash(fromPath) === urlPath
          }
          return removeTrailingSlash(fromPath) === urlPath
        }
      );

      if (typeof punctualRedirection !== "undefined") {
        // join request and redirection queries
        const queryParams = [
          ...getQueriesFromPath(to.fullPath),
          ...getQueriesFromPath(punctualRedirection.to)
        ]
        const uri = joinQueriesAndPath(addTrailingSlash(punctualRedirection.to), queryParams)
        return navigateTo(uri, {
          redirectCode: punctualRedirection.code,
          external: true,
        });
      }
      // punctual redirects had the priority, now we look for any regex redirections
      let regexRedirection: { code: number, path: string } | undefined
      regexRedirects.forEach((r) => {
        const regex = new RegExp(r.from);
        if (regex.test(path)) {
          const toPath = addTrailingSlash(path.replace(regex, r.to));
          regexRedirection = { code: r.code, path: toPath }
        }
      });

      if (typeof regexRedirection !== 'undefined') {
        // join request and redirection queries
        const queryParams = [
          ...getQueriesFromPath(to.fullPath),
          ...getQueriesFromPath(regexRedirection.path)
        ]
        const uri = joinQueriesAndPath(addTrailingSlash(regexRedirection.path), queryParams)

        return navigateTo(uri, {
          redirectCode: regexRedirection.code,
          external: true,
        });
      }


      // trailing-slash
      if (<% print(options.trailingSlash) %>) {
        const originalSplittedPath = to.fullPath.split("?")
        const originalPath = originalSplittedPath[0]

        if (!hasTrailingSlash(originalPath)) {
          originalSplittedPath[0] = addTrailingSlash(originalPath)
          return navigateTo(originalSplittedPath.join("?"), {
            redirectCode: 301,
            external: true
          })
        }
      }
    }
  }
});

